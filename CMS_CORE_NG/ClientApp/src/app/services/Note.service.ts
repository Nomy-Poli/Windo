//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

export interface INoteService {
    createNote(model: NoteVM | null | undefined, boardId: number | null): Observable<NoteVM | null>;
    createReplayToNote(model: NoteReplayVM | null | undefined, businessId: number, authorEmail: string | null, businessName: string | null): Observable<number>;
    createReplayToNoteMessage(model: ReplayNoteMessageVM | null | undefined): Observable<number>;
    updateReplayNote(model: NoteReplayVM | null | undefined): Observable<boolean>;
    deleteNote(noteId: number, reason: number): Observable<boolean>;
    deleteReplayNote(replayId: number, reason: number): Observable<boolean>;
    getNoteById(noteId: number): Observable<NoteWithReplayVM | null>;
    getNoteReplays(noteId: number): Observable<NoteReplayVM[] | null>;
    getBoardsWithNotes(searchParameters: NoteSearchParameters | null | undefined): Observable<NoteVM[] | null>;
    getLatestNotes(): Observable<BoardForCardVM[] | null>;
    updateNote(model: NoteVM | null | undefined): Observable<boolean>;
    getReplayNoteMessages(noteId: number): Observable<ReplayNoteMessageVM[] | null>;
    getBoards(): Observable<BoardVM[] | null>;
    emailsAboatNews(emailTo: string | null): Observable<boolean>;
    emailsAboatNewNote(categoryId: number, noteId: number): Observable<boolean>;
}

@Injectable()
export class NoteService implements INoteService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createNote(model: NoteVM | null | undefined, boardId: number | null): Observable<NoteVM | null> {
        let url_ = this.baseUrl + "/api/Note/CreateNote?";
        if (boardId === undefined)
            throw new Error("The parameter 'boardId' must be defined.");
        else if(boardId !== null)
            url_ += "boardId=" + encodeURIComponent("" + boardId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NoteVM | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NoteVM | null>;
        }));
    }

    protected processCreateNote(response: HttpResponseBase): Observable<NoteVM | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NoteVM;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NoteVM | null>(null as any);
    }

    createReplayToNote(model: NoteReplayVM | null | undefined, businessId: number, authorEmail: string | null, businessName: string | null): Observable<number> {
        let url_ = this.baseUrl + "/api/Note/CreateReplayToNote?";
        if (businessId === undefined || businessId === null)
            throw new Error("The parameter 'businessId' must be defined and cannot be null.");
        else
            url_ += "BusinessId=" + encodeURIComponent("" + businessId) + "&";
        if (authorEmail === undefined)
            throw new Error("The parameter 'authorEmail' must be defined.");
        else if(authorEmail !== null)
            url_ += "authorEmail=" + encodeURIComponent("" + authorEmail) + "&";
        if (businessName === undefined)
            throw new Error("The parameter 'businessName' must be defined.");
        else if(businessName !== null)
            url_ += "businessName=" + encodeURIComponent("" + businessName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateReplayToNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateReplayToNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateReplayToNote(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    createReplayToNoteMessage(model: ReplayNoteMessageVM | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/Note/CreateReplayToNoteMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateReplayToNoteMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateReplayToNoteMessage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateReplayToNoteMessage(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    updateReplayNote(model: NoteReplayVM | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/UpdateReplayNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateReplayNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateReplayNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateReplayNote(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    deleteNote(noteId: number, reason: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/DeleteNote?";
        if (noteId === undefined || noteId === null)
            throw new Error("The parameter 'noteId' must be defined and cannot be null.");
        else
            url_ += "noteId=" + encodeURIComponent("" + noteId) + "&";
        if (reason === undefined || reason === null)
            throw new Error("The parameter 'reason' must be defined and cannot be null.");
        else
            url_ += "reason=" + encodeURIComponent("" + reason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDeleteNote(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    deleteReplayNote(replayId: number, reason: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/DeleteReplayNote?";
        if (replayId === undefined || replayId === null)
            throw new Error("The parameter 'replayId' must be defined and cannot be null.");
        else
            url_ += "replayId=" + encodeURIComponent("" + replayId) + "&";
        if (reason === undefined || reason === null)
            throw new Error("The parameter 'reason' must be defined and cannot be null.");
        else
            url_ += "reason=" + encodeURIComponent("" + reason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteReplayNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteReplayNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDeleteReplayNote(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    getNoteById(noteId: number): Observable<NoteWithReplayVM | null> {
        let url_ = this.baseUrl + "/api/Note/GetNoteById?";
        if (noteId === undefined || noteId === null)
            throw new Error("The parameter 'noteId' must be defined and cannot be null.");
        else
            url_ += "noteId=" + encodeURIComponent("" + noteId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNoteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNoteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NoteWithReplayVM | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NoteWithReplayVM | null>;
        }));
    }

    protected processGetNoteById(response: HttpResponseBase): Observable<NoteWithReplayVM | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NoteWithReplayVM;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NoteWithReplayVM | null>(null as any);
    }

    getNoteReplays(noteId: number): Observable<NoteReplayVM[] | null> {
        let url_ = this.baseUrl + "/api/Note/getNoteReplays?";
        if (noteId === undefined || noteId === null)
            throw new Error("The parameter 'noteId' must be defined and cannot be null.");
        else
            url_ += "noteId=" + encodeURIComponent("" + noteId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNoteReplays(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNoteReplays(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NoteReplayVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NoteReplayVM[] | null>;
        }));
    }

    protected processGetNoteReplays(response: HttpResponseBase): Observable<NoteReplayVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NoteReplayVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NoteReplayVM[] | null>(null as any);
    }

    getBoardsWithNotes(searchParameters: NoteSearchParameters | null | undefined): Observable<NoteVM[] | null> {
        let url_ = this.baseUrl + "/api/Note/getBoardsWithNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchParameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBoardsWithNotes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBoardsWithNotes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NoteVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NoteVM[] | null>;
        }));
    }

    protected processGetBoardsWithNotes(response: HttpResponseBase): Observable<NoteVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NoteVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NoteVM[] | null>(null as any);
    }

    getLatestNotes(): Observable<BoardForCardVM[] | null> {
        let url_ = this.baseUrl + "/api/Note/GetLatestNotes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLatestNotes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLatestNotes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BoardForCardVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BoardForCardVM[] | null>;
        }));
    }

    protected processGetLatestNotes(response: HttpResponseBase): Observable<BoardForCardVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BoardForCardVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BoardForCardVM[] | null>(null as any);
    }

    updateNote(model: NoteVM | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/UpdateNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateNote(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    getReplayNoteMessages(noteId: number): Observable<ReplayNoteMessageVM[] | null> {
        let url_ = this.baseUrl + "/api/Note/getReplayNoteMessages?";
        if (noteId === undefined || noteId === null)
            throw new Error("The parameter 'noteId' must be defined and cannot be null.");
        else
            url_ += "noteId=" + encodeURIComponent("" + noteId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReplayNoteMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReplayNoteMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplayNoteMessageVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplayNoteMessageVM[] | null>;
        }));
    }

    protected processGetReplayNoteMessages(response: HttpResponseBase): Observable<ReplayNoteMessageVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ReplayNoteMessageVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplayNoteMessageVM[] | null>(null as any);
    }

    getBoards(): Observable<BoardVM[] | null> {
        let url_ = this.baseUrl + "/api/Note/getBoards";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBoards(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBoards(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BoardVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BoardVM[] | null>;
        }));
    }

    protected processGetBoards(response: HttpResponseBase): Observable<BoardVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BoardVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BoardVM[] | null>(null as any);
    }

    emailsAboatNews(emailTo: string | null): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/EmailsAboatNews?";
        if (emailTo === undefined)
            throw new Error("The parameter 'emailTo' must be defined.");
        else if(emailTo !== null)
            url_ += "emailTo=" + encodeURIComponent("" + emailTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmailsAboatNews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailsAboatNews(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processEmailsAboatNews(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    emailsAboatNewNote(categoryId: number, noteId: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Note/EmailsAboatNewNote?";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined and cannot be null.");
        else
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        if (noteId === undefined || noteId === null)
            throw new Error("The parameter 'noteId' must be defined and cannot be null.");
        else
            url_ += "noteId=" + encodeURIComponent("" + noteId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmailsAboatNewNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailsAboatNewNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processEmailsAboatNewNote(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

export interface NoteVM {
    Id: number;
    Header?: string | undefined;
    Text?: string | undefined;
    BusinessId: number;
    CategorySubCategoryId?: number | undefined;
    GroupId?: number | undefined;
    Labels?: string | undefined;
    CreatetionDate?: Date | undefined;
    LastUpdateDate?: Date | undefined;
    DeletionDate?: Date | undefined;
    ExpirationDate?: Date | undefined;
    IsActive?: boolean | undefined;
    ChangedStatus?: number | undefined;
    NumberOfViews?: number | undefined;
    IsBold?: boolean | undefined;
    IsPayNote?: boolean | undefined;
    Business?: BusinessNamesPicUserIdVM | undefined;
    CategorySubCategory?: CategorySubCategoryVm | undefined;
    NetworkingGroup?: NetworkingGroupVM | undefined;
    Boards?: BoardVM[] | undefined;
    ReplayCount?: number | undefined;
}

export interface BusinessNamesPicUserIdVM {
    id: number;
    buisnessName?: string | undefined;
    logoPictureId: string;
    userId?: string | undefined;
    Score?: number | undefined;
}

export interface CategorySubCategoryVm {
    id: number;
    categoryId: number;
    categoryName?: string | undefined;
    subCategoryId: number;
    subCategoryName?: string | undefined;
    isPossibleInBarter: boolean;
}

export interface NetworkingGroupVM {
    Id: number;
    GroupName?: string | undefined;
    ManagerBusinessId?: number | undefined;
    ManagerBusinessEmail?: string | undefined;
    Description?: string | undefined;
    City?: string | undefined;
    AreaId?: number | undefined;
    CreationDate: Date;
    IsActive?: boolean | undefined;
    ManagerBusiness?: BusinessForCardVM | undefined;
    Area?: AreaVm | undefined;
}

export interface BusinessForCardVM {
    id: number;
    userId?: string | undefined;
    buisnessName?: string | undefined;
    businessEmailAddress?: string | undefined;
    actionDiscription?: string | undefined;
    isdisplayBusinessOwnerName?: boolean | undefined;
    ispayingBuisness?: boolean | undefined;
    isburterBuisness?: boolean | undefined;
    iscollaborationBuisness?: boolean | undefined;
    logoPictureId?: string | undefined;
    listOfAll4buisnessCategory?: BuisnessCategoryVm[] | undefined;
    index?: number | undefined;
    barterProduct1?: string | undefined;
    barterProduct2?: string | undefined;
    lastupdatedStartDate?: Date | undefined;
    ownerName?: string | undefined;
    Score?: number | undefined;
    buisnessCategory1?: BuisnessCategoryVm[] | undefined;
    buisnessCategory2?: BuisnessCategoryVm[] | undefined;
    buisnessCategory3?: BuisnessCategoryVm[] | undefined;
    buisnessCategory4?: BuisnessCategoryVm[] | undefined;
    buisnessAreaList1?: BuisnessAreaVm[] | undefined;
}

export interface BuisnessCategoryVm {
    businessId?: number | undefined;
    categoryId: number;
    subCategoryId: number;
    combinationtId: number;
    isPossibleInBarter: boolean;
    categoryName?: string | undefined;
    subCategoryName?: string | undefined;
}

export interface BuisnessAreaVm {
    id?: number | undefined;
    buisnessId?: number | undefined;
    areaId: number;
}

export interface AreaVm {
    id: number;
    name?: string | undefined;
}

export interface BoardVM {
    Id: number;
    Name?: string | undefined;
    Description?: string | undefined;
    Color?: string | undefined;
}

export interface NoteReplayVM {
    Id: number;
    NoteId: number;
    BusinessId: number;
    Text?: string | undefined;
    CreationDate?: Date | undefined;
    Business?: BusinessNamesPicUserIdVM | undefined;
}

export interface ReplayNoteMessageVM {
    Id: number;
    BusinessId: number;
    NoteId: number;
    MessageId: string;
    CreationDate?: Date | undefined;
    Business?: BusinessNamesPicUserIdVM | undefined;
}

export interface NoteWithReplayVM {
    Id: number;
    Header?: string | undefined;
    Text?: string | undefined;
    BusinessId: number;
    CategorySubCategoryId?: number | undefined;
    Labels?: string | undefined;
    CreatetionDate?: Date | undefined;
    LastUpdateDate?: Date | undefined;
    DeletionDate?: Date | undefined;
    ExpirationDate?: Date | undefined;
    IsActive?: boolean | undefined;
    ChangedStatus?: number | undefined;
    NumberOfViews?: number | undefined;
    IsBold?: boolean | undefined;
    IsPayNote?: boolean | undefined;
    Business?: BusinessNamesPicUserIdVM | undefined;
    CategorySubCategory?: CategorySubCategoryVm | undefined;
    ReplayToNotes?: NoteReplayVM[] | undefined;
}

export interface NoteSearchParameters {
    Header?: string | undefined;
    Text?: string | undefined;
    BusinessId?: number | undefined;
    BoardId?: number | undefined;
    ForGroups?: boolean | undefined;
    IsManager?: boolean | undefined;
    getMyNote?: boolean | undefined;
    CategorySubCategoryId?: number | undefined;
    CreationDateFrom?: Date | undefined;
    CreationDateTill?: Date | undefined;
    LastUpdateDate?: Date | undefined;
    Latest?: number | undefined;
}

export interface BoardForCardVM {
    Id: number;
    Name?: string | undefined;
    Description?: string | undefined;
    Color?: string | undefined;
    Notes?: NoteForCardVM[] | undefined;
}

export interface NoteForCardVM {
    Id: number;
    Header?: string | undefined;
    BusinessId: number;
    CategorySubCategoryId?: number | undefined;
    LastUpdateDate?: Date | undefined;
    IsPayNote?: boolean | undefined;
    Business?: BusinessNamesPicUserIdVM | undefined;
    CategorySubCategory?: CategorySubCategoryVm | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}