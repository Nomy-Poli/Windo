/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

export interface ICollaborationsService {
    getCaseStudyById(id: number): Observable<CaseStudyVM | null>;
    getAllCaseStudy(): Observable<CaseStudyForCardsVM[] | null>;
    getLastCS(): Observable<CaseStudyForCardsVM[] | null>;
    getCaseStudyByCollaborationId(idAndTableName: IdAndTableNameForCS | null | undefined): Observable<CaseStudyVM | null>;
    createCaseStudyWithPictures(): Observable<number>;
    updateCaseStudy(): Observable<boolean>;
    getAllPaidTransactions(): Observable<PaidTransactionVM[] | null>;
    getAllBarterDeals(): Observable<BarterDealVM[] | null>;
    getAllJointProjects(): Observable<JointProjectVM[] | null>;
    getCSByBuissinesID(businessID: number): Observable<CaseStudyForCardsVM[] | null>;
    deleteCollaborationByIDAndTable(fromTable: FromTable, id: number): Observable<boolean>;
}

@Injectable()
export class CollaborationsService implements ICollaborationsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCaseStudyById(id: number): Observable<CaseStudyVM | null> {
        let url_ = this.baseUrl + "/api/Collaborations/getCaseStudyById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCaseStudyById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCaseStudyById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CaseStudyVM | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CaseStudyVM | null>;
        }));
    }

    protected processGetCaseStudyById(response: HttpResponseBase): Observable<CaseStudyVM | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CaseStudyVM;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseStudyVM | null>(null as any);
    }

    getAllCaseStudy(): Observable<CaseStudyForCardsVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/GetAllCaseStudy";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCaseStudy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCaseStudy(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CaseStudyForCardsVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CaseStudyForCardsVM[] | null>;
        }));
    }

    protected processGetAllCaseStudy(response: HttpResponseBase): Observable<CaseStudyForCardsVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CaseStudyForCardsVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseStudyForCardsVM[] | null>(null as any);
    }

    getLastCS(): Observable<CaseStudyForCardsVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/GetLastCS";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLastCS(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLastCS(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CaseStudyForCardsVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CaseStudyForCardsVM[] | null>;
        }));
    }

    protected processGetLastCS(response: HttpResponseBase): Observable<CaseStudyForCardsVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CaseStudyForCardsVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseStudyForCardsVM[] | null>(null as any);
    }

    getCaseStudyByCollaborationId(idAndTableName: IdAndTableNameForCS | null | undefined): Observable<CaseStudyVM | null> {
        let url_ = this.baseUrl + "/api/Collaborations/getCaseStudyByCollaborationId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idAndTableName);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCaseStudyByCollaborationId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCaseStudyByCollaborationId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CaseStudyVM | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CaseStudyVM | null>;
        }));
    }

    protected processGetCaseStudyByCollaborationId(response: HttpResponseBase): Observable<CaseStudyVM | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CaseStudyVM;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseStudyVM | null>(null as any);
    }

    createCaseStudyWithPictures(): Observable<number> {
        let url_ = this.baseUrl + "/api/Collaborations/createCaseStudyWithPictures";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCaseStudyWithPictures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCaseStudyWithPictures(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateCaseStudyWithPictures(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    updateCaseStudy(): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Collaborations/updateCaseStudy";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCaseStudy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCaseStudy(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateCaseStudy(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    getAllPaidTransactions(): Observable<PaidTransactionVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/getAllPaidTransactions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaidTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaidTransactions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaidTransactionVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaidTransactionVM[] | null>;
        }));
    }

    protected processGetAllPaidTransactions(response: HttpResponseBase): Observable<PaidTransactionVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PaidTransactionVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaidTransactionVM[] | null>(null as any);
    }

    getAllBarterDeals(): Observable<BarterDealVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/getAllBarterDeals";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllBarterDeals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllBarterDeals(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BarterDealVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BarterDealVM[] | null>;
        }));
    }

    protected processGetAllBarterDeals(response: HttpResponseBase): Observable<BarterDealVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BarterDealVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BarterDealVM[] | null>(null as any);
    }

    getAllJointProjects(): Observable<JointProjectVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/getAllJointProjects";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllJointProjects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllJointProjects(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JointProjectVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JointProjectVM[] | null>;
        }));
    }

    protected processGetAllJointProjects(response: HttpResponseBase): Observable<JointProjectVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as JointProjectVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JointProjectVM[] | null>(null as any);
    }

    getCSByBuissinesID(businessID: number): Observable<CaseStudyForCardsVM[] | null> {
        let url_ = this.baseUrl + "/api/Collaborations/GetCSByBuissinesID?";
        if (businessID === undefined || businessID === null)
            throw new Error("The parameter 'businessID' must be defined and cannot be null.");
        else
            url_ += "BusinessID=" + encodeURIComponent("" + businessID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCSByBuissinesID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCSByBuissinesID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CaseStudyForCardsVM[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CaseStudyForCardsVM[] | null>;
        }));
    }

    protected processGetCSByBuissinesID(response: HttpResponseBase): Observable<CaseStudyForCardsVM[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CaseStudyForCardsVM[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseStudyForCardsVM[] | null>(null as any);
    }

    deleteCollaborationByIDAndTable(fromTable: FromTable, id: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Collaborations/DeleteCollaborationByIDAndTable?";
        if (fromTable === undefined || fromTable === null)
            throw new Error("The parameter 'fromTable' must be defined and cannot be null.");
        else
            url_ += "fromTable=" + encodeURIComponent("" + fromTable) + "&";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCollaborationByIDAndTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCollaborationByIDAndTable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDeleteCollaborationByIDAndTable(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

export interface CaseStudyVM {
    Id: number;
    FromTable: FromTable;
    PaidTransactionID?: number | undefined;
    BarterDealID?: number | undefined;
    JointProjectID?: number | undefined;
    ReportDate: Date;
    MarketingTitle?: string | undefined;
    BusinessTitle?: string | undefined;
    Description?: string | undefined;
    Challenge?: string | undefined;
    PowerMultiplier?: string | undefined;
    CustomersGain?: string | undefined;
    PicGuid?: string | undefined;
    CustomerResponses?: CaseStudyCustomerResponsesVM[] | undefined;
    PaidTransaction?: PaidTransactionVM | undefined;
    BarterDeal?: BarterDealVM | undefined;
    JointProject?: JointProjectVM | undefined;
    BusinessesInCaseStudy?: BusinessInCaseStudyVM[] | undefined;
    CaseStudyPictures?: CaseStudyPictureVM[] | undefined;
}

export enum FromTable {
    PaidTransaction = 1,
    BarterDeal = 2,
    JointProject = 3,
}

export interface CaseStudyCustomerResponsesVM {
    Id: number;
    CustomerName?: string | undefined;
    MinimalDescription?: string | undefined;
    Response?: string | undefined;
    CaseStudyId: number;
}

export interface PaidTransactionVM {
    Id: number;
    SupplierBusinessId: number;
    ConsumerBusinessId: number;
    CategorySubCategoryId: number;
    Description?: string | undefined;
    Review?: string | undefined;
    ScopTransactionNIS?: number | undefined;
    PictureID?: string | undefined;
    Availability?: boolean | undefined;
    Service?: boolean | undefined;
    Professionalism?: boolean | undefined;
    Price?: boolean | undefined;
    Flexable?: boolean | undefined;
    IfDisplayedInCS?: boolean | undefined;
    PaidTransactionPicture?: any | undefined;
    SupplierBusiness?: BusinessNamesPicturesVM | undefined;
    ConsumerBusiness?: BusinessNamesPicturesVM | undefined;
}

export interface BusinessNamesPicturesVM {
    id: number;
    buisnessName?: string | undefined;
    logoPictureId: string;
}

export interface BarterDealVM {
    Id: number;
    ReportsBusinessId: number;
    PartnerBusinessId: number;
    ReportDate: Date;
    ReportCategorySubCategoryId: number;
    ReportDescriptionDeal?: string | undefined;
    PartnerCategorySubCategoryId: number;
    PartnerDescriptionDeal?: string | undefined;
    BusinessDescription?: string | undefined;
    QuotePartnerBusiness?: string | undefined;
    QuoteReportsBusiness?: string | undefined;
    ReportsBusinessPictureID?: string | undefined;
    Business1Picture?: any | undefined;
    PartnerBusinessPictureID?: string | undefined;
    Business2Picture?: any | undefined;
    JointExplanation?: string | undefined;
    ConfirmedByPartner: boolean;
    MoreLeisure?: boolean | undefined;
    MoreShopping?: boolean | undefined;
    IncreasingRevenue?: boolean | undefined;
    ReducingExpenses?: boolean | undefined;
    ReducingEffort?: boolean | undefined;
    IfDisplayedInCS?: boolean | undefined;
    ReportsBusiness?: BusinessNamesPicturesVM | undefined;
    PartnerBusiness?: BusinessNamesPicturesVM | undefined;
}

export interface JointProjectVM {
    Id: number;
    CollaborationTypeId: number;
    ReportDate: Date;
    HeaderCollaboration?: string | undefined;
    JointExplanation?: string | undefined;
    PictureId?: string | undefined;
    Picture?: any | undefined;
    MoreLeisure?: boolean | undefined;
    MoreShopping?: boolean | undefined;
    IncreasingRevenue?: boolean | undefined;
    ReducingExpenses?: boolean | undefined;
    ReducingEffort?: boolean | undefined;
    ConfirmedByPartners?: boolean | undefined;
    IfDisplayedInCS?: boolean | undefined;
    CollaborationType?: CollaborationTypeVM | undefined;
    BusinessesInCollaboration?: BusinessInCollaborationVM[] | undefined;
}

export interface CollaborationTypeVM {
    Id: number;
    Description?: string | undefined;
}

export interface BusinessInCollaborationVM extends BusinessNamesPicturesVM {
    PartInCollaboration?: string | undefined;
    IfReport?: boolean | undefined;
}

export interface BusinessInCaseStudyVM {
    Id: number;
    CaseStudyId: number;
    BusinessId: number;
    BuinessOwnerNameForCS?: string | undefined;
    LineOfBusiness?: string | undefined;
    WordOfPartner?: string | undefined;
    Business?: BusinessNamesPicturesVM | undefined;
}

export interface CaseStudyPictureVM {
    Id: number;
    CaseStudyId: number;
    PicGuid: string;
}

export interface CaseStudyForCardsVM {
    Id: number;
    FromTable: FromTable;
    MarketingTitle?: string | undefined;
    BusinessTitle?: string | undefined;
    PicGuid?: string | undefined;
    BusinessesInCaseStudy?: BusinessInCaseStudyVM[] | undefined;
    CaseStudyPictures?: CaseStudyPictureVM[] | undefined;
}

export interface IdAndTableNameForCS {
    Id: number;
    FromTable: FromTable;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}