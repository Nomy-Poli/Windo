// <auto-generated />
using System;
using DataService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMS_CORE_NG.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220309074348_colorsInBoards")]
    partial class colorsInBoards
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ModelService.ActivityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ModelService.AddressModel", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ModelService.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Middlename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Terms")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ModelService.ContactModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ModelService.CountryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("States")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoDigitCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ModelService.ImportResponseModel", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Added")
                        .HasColumnType("int");

                    b.Property<int>("ColumnsFound")
                        .HasColumnType("int");

                    b.Property<int>("Deleted")
                        .HasColumnType("int");

                    b.Property<int>("DeletedRecords")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErroredRecords")
                        .HasColumnType("int");

                    b.Property<string>("ImportFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImporterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadedRecords")
                        .HasColumnType("int");

                    b.Property<int>("MarkForDelete")
                        .HasColumnType("int");

                    b.Property<int>("MarkForNew")
                        .HasColumnType("int");

                    b.Property<int>("NewLoaded")
                        .HasColumnType("int");

                    b.Property<int>("NewRecordsNotInDataBase")
                        .HasColumnType("int");

                    b.Property<int>("NotUpdated")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("int");

                    b.HasKey("ImportId");

                    b.ToTable("UploadActivitiesHistory");
                });

            modelBuilder.Entity("ModelService.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTypes");
                });

            modelBuilder.Entity("ModelService.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ModelService.TokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EncryptionKeyJwt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptionKeyRt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("ModelService.TwoFactorCodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<bool>("CodeExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("CodeIsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeviceIdExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("EncryptionKey2Fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptionKeyForDeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeviceIdExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("RememberDevice")
                        .HasColumnType("bit");

                    b.Property<string>("SelectedProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoFactorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TwoFactorCodes");
                });

            modelBuilder.Entity("ModelService.windoModels.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "כל הארץ"
                        },
                        new
                        {
                            Id = 2,
                            name = "אזור המרכז"
                        },
                        new
                        {
                            Id = 3,
                            name = "ירושלים והסביבה"
                        },
                        new
                        {
                            Id = 4,
                            name = "צפון"
                        },
                        new
                        {
                            Id = 5,
                            name = "דרום"
                        });
                });

            modelBuilder.Entity("ModelService.windoModels.BarterDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmedByPartner")
                        .HasColumnType("bit");

                    b.Property<bool?>("IfDisplayedInCS")
                        .HasColumnType("bit");

                    b.Property<bool?>("IncreasingRevenue")
                        .HasColumnType("bit");

                    b.Property<string>("JointExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MoreLeisure")
                        .HasColumnType("bit");

                    b.Property<bool?>("MoreShopping")
                        .HasColumnType("bit");

                    b.Property<int>("PartnerBusinessId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PartnerBusinessPictureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PartnerCategorySubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerDescriptionDeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotePartnerBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuoteReportsBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReducingEffort")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReducingExpenses")
                        .HasColumnType("bit");

                    b.Property<int>("ReportCategorySubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDescriptionDeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportsBusinessId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportsBusinessPictureID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BarterDeals");
                });

            modelBuilder.Entity("ModelService.windoModels.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f16b7e",
                            Description = "הצעות ובקשות לשיתופי פעולה ספציפיים ועדכניים , שקורים ממש עכשיו.",
                            Name = "דרושים"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#f9af74",
                            Description = "עצה ועזרה הדדית.",
                            Name = "עצות"
                        });
                });

            modelBuilder.Entity("ModelService.windoModels.Buisness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionalCollaborationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBusinessStatus")
                        .HasColumnType("int");

                    b.Property<string>("actionDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("barterProduct1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("barterProduct2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buisnessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buisnessWebSiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("coverPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isburterBuisness")
                        .HasColumnType("bit");

                    b.Property<bool?>("isburterPossibleInAllCategory")
                        .HasColumnType("bit");

                    b.Property<bool?>("iscollaborationBuisness")
                        .HasColumnType("bit");

                    b.Property<bool?>("isdisplayBusinessOwnerName")
                        .HasColumnType("bit");

                    b.Property<bool?>("isopenToSuggestionsForBarter")
                        .HasColumnType("bit");

                    b.Property<bool?>("ispayingBuisness")
                        .HasColumnType("bit");

                    b.Property<Guid>("logoPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("phoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedBusinessStatus");

                    b.HasIndex("userId");

                    b.ToTable("Buisness");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("areaId")
                        .HasColumnType("int");

                    b.Property<int>("buisnessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("areaId");

                    b.HasIndex("buisnessId");

                    b.ToTable("BuisnessArea");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessPicture", b =>
                {
                    b.Property<Guid>("buisnessPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("buisnessId")
                        .HasColumnType("int");

                    b.Property<int>("numberOfPicture")
                        .HasColumnType("int");

                    b.HasKey("buisnessPictureId");

                    b.HasIndex("buisnessId");

                    b.ToTable("BuisnessPicture");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("buisnessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("buisnessId");

                    b.HasIndex("statusId");

                    b.ToTable("BuisnessStatus");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("buisnessId")
                        .HasColumnType("int");

                    b.Property<int>("categorySubCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("isPossibleInBarter")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("buisnessId");

                    b.HasIndex("categorySubCategoryId");

                    b.ToTable("BuisnessSubCategory");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessSubCategoryBarter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("buisnessId")
                        .HasColumnType("int");

                    b.Property<int>("categorySubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("buisnessId");

                    b.HasIndex("categorySubCategoryId");

                    b.ToTable("BuisnessSubCategoryBarter");
                });

            modelBuilder.Entity("ModelService.windoModels.BusinessInCaseStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuinessOwnerNameForCS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("CaseStudyId")
                        .HasColumnType("int");

                    b.Property<string>("LineOfBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WordOfPartner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CaseStudyId");

                    b.ToTable("BusinessesInCaseStudy");
                });

            modelBuilder.Entity("ModelService.windoModels.BusinessInCollaboration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<bool?>("IfReport")
                        .HasColumnType("bit");

                    b.Property<int>("JoinProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PartInCollaboration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("JoinProjectId");

                    b.ToTable("BusinessInCollaborations");
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarterDealID")
                        .HasColumnType("int");

                    b.Property<string>("BusinessTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Challenge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomersGain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromTable")
                        .HasColumnType("int");

                    b.Property<int?>("JointProjectID")
                        .HasColumnType("int");

                    b.Property<string>("MarketingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaidTransactionID")
                        .HasColumnType("int");

                    b.Property<Guid?>("PicGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PowerMultiplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BarterDealID");

                    b.HasIndex("JointProjectID");

                    b.HasIndex("PaidTransactionID");

                    b.ToTable("CaseStudies");
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudyCustomerResponses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseStudyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseStudyId");

                    b.ToTable("CustomerResponses");
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudyPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseStudyId")
                        .HasColumnType("int");

                    b.Property<Guid>("PicGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseStudyId");

                    b.ToTable("CaseStudyPictures");
                });

            modelBuilder.Entity("ModelService.windoModels.CategorySubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("subCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.HasIndex("subCategoryId");

                    b.ToTable("CategorySubCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            categoryId = 1,
                            subCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            categoryId = 1,
                            subCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            categoryId = 1,
                            subCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            categoryId = 1,
                            subCategoryId = 4
                        },
                        new
                        {
                            Id = 5,
                            categoryId = 1,
                            subCategoryId = 5
                        },
                        new
                        {
                            Id = 6,
                            categoryId = 1,
                            subCategoryId = 6
                        },
                        new
                        {
                            Id = 7,
                            categoryId = 1,
                            subCategoryId = 7
                        },
                        new
                        {
                            Id = 8,
                            categoryId = 1,
                            subCategoryId = 8
                        },
                        new
                        {
                            Id = 9,
                            categoryId = 1,
                            subCategoryId = 9
                        },
                        new
                        {
                            Id = 10,
                            categoryId = 2,
                            subCategoryId = 10
                        },
                        new
                        {
                            Id = 11,
                            categoryId = 2,
                            subCategoryId = 11
                        },
                        new
                        {
                            Id = 12,
                            categoryId = 2,
                            subCategoryId = 12
                        },
                        new
                        {
                            Id = 13,
                            categoryId = 2,
                            subCategoryId = 13
                        },
                        new
                        {
                            Id = 14,
                            categoryId = 2,
                            subCategoryId = 14
                        },
                        new
                        {
                            Id = 15,
                            categoryId = 2,
                            subCategoryId = 15
                        },
                        new
                        {
                            Id = 16,
                            categoryId = 2,
                            subCategoryId = 16
                        },
                        new
                        {
                            Id = 17,
                            categoryId = 2,
                            subCategoryId = 17
                        },
                        new
                        {
                            Id = 18,
                            categoryId = 2,
                            subCategoryId = 18
                        },
                        new
                        {
                            Id = 19,
                            categoryId = 2,
                            subCategoryId = 19
                        },
                        new
                        {
                            Id = 20,
                            categoryId = 2,
                            subCategoryId = 20
                        },
                        new
                        {
                            Id = 21,
                            categoryId = 2,
                            subCategoryId = 21
                        },
                        new
                        {
                            Id = 22,
                            categoryId = 2,
                            subCategoryId = 22
                        },
                        new
                        {
                            Id = 23,
                            categoryId = 2,
                            subCategoryId = 23
                        },
                        new
                        {
                            Id = 24,
                            categoryId = 3,
                            subCategoryId = 24
                        },
                        new
                        {
                            Id = 25,
                            categoryId = 3,
                            subCategoryId = 25
                        },
                        new
                        {
                            Id = 26,
                            categoryId = 3,
                            subCategoryId = 26
                        },
                        new
                        {
                            Id = 27,
                            categoryId = 3,
                            subCategoryId = 27
                        },
                        new
                        {
                            Id = 28,
                            categoryId = 3,
                            subCategoryId = 28
                        },
                        new
                        {
                            Id = 29,
                            categoryId = 3,
                            subCategoryId = 29
                        },
                        new
                        {
                            Id = 30,
                            categoryId = 3,
                            subCategoryId = 30
                        },
                        new
                        {
                            Id = 31,
                            categoryId = 4,
                            subCategoryId = 31
                        },
                        new
                        {
                            Id = 32,
                            categoryId = 4,
                            subCategoryId = 32
                        },
                        new
                        {
                            Id = 33,
                            categoryId = 4,
                            subCategoryId = 33
                        },
                        new
                        {
                            Id = 34,
                            categoryId = 4,
                            subCategoryId = 34
                        },
                        new
                        {
                            Id = 35,
                            categoryId = 4,
                            subCategoryId = 35
                        },
                        new
                        {
                            Id = 36,
                            categoryId = 4,
                            subCategoryId = 36
                        },
                        new
                        {
                            Id = 37,
                            categoryId = 4,
                            subCategoryId = 37
                        },
                        new
                        {
                            Id = 38,
                            categoryId = 4,
                            subCategoryId = 38
                        },
                        new
                        {
                            Id = 39,
                            categoryId = 4,
                            subCategoryId = 39
                        },
                        new
                        {
                            Id = 40,
                            categoryId = 4,
                            subCategoryId = 40
                        },
                        new
                        {
                            Id = 41,
                            categoryId = 4,
                            subCategoryId = 41
                        },
                        new
                        {
                            Id = 42,
                            categoryId = 5,
                            subCategoryId = 42
                        },
                        new
                        {
                            Id = 43,
                            categoryId = 5,
                            subCategoryId = 43
                        },
                        new
                        {
                            Id = 44,
                            categoryId = 5,
                            subCategoryId = 44
                        },
                        new
                        {
                            Id = 45,
                            categoryId = 5,
                            subCategoryId = 45
                        },
                        new
                        {
                            Id = 46,
                            categoryId = 6,
                            subCategoryId = 46
                        },
                        new
                        {
                            Id = 47,
                            categoryId = 6,
                            subCategoryId = 47
                        },
                        new
                        {
                            Id = 48,
                            categoryId = 6,
                            subCategoryId = 48
                        },
                        new
                        {
                            Id = 49,
                            categoryId = 6,
                            subCategoryId = 49
                        },
                        new
                        {
                            Id = 50,
                            categoryId = 6,
                            subCategoryId = 50
                        },
                        new
                        {
                            Id = 51,
                            categoryId = 6,
                            subCategoryId = 51
                        },
                        new
                        {
                            Id = 52,
                            categoryId = 6,
                            subCategoryId = 52
                        },
                        new
                        {
                            Id = 53,
                            categoryId = 6,
                            subCategoryId = 53
                        },
                        new
                        {
                            Id = 54,
                            categoryId = 6,
                            subCategoryId = 54
                        },
                        new
                        {
                            Id = 55,
                            categoryId = 6,
                            subCategoryId = 55
                        },
                        new
                        {
                            Id = 56,
                            categoryId = 6,
                            subCategoryId = 56
                        },
                        new
                        {
                            Id = 57,
                            categoryId = 6,
                            subCategoryId = 57
                        },
                        new
                        {
                            Id = 58,
                            categoryId = 6,
                            subCategoryId = 58
                        },
                        new
                        {
                            Id = 59,
                            categoryId = 7,
                            subCategoryId = 59
                        },
                        new
                        {
                            Id = 60,
                            categoryId = 7,
                            subCategoryId = 60
                        },
                        new
                        {
                            Id = 61,
                            categoryId = 7,
                            subCategoryId = 61
                        },
                        new
                        {
                            Id = 62,
                            categoryId = 7,
                            subCategoryId = 62
                        },
                        new
                        {
                            Id = 63,
                            categoryId = 7,
                            subCategoryId = 63
                        },
                        new
                        {
                            Id = 64,
                            categoryId = 7,
                            subCategoryId = 64
                        },
                        new
                        {
                            Id = 65,
                            categoryId = 7,
                            subCategoryId = 65
                        },
                        new
                        {
                            Id = 66,
                            categoryId = 7,
                            subCategoryId = 66
                        },
                        new
                        {
                            Id = 67,
                            categoryId = 7,
                            subCategoryId = 67
                        },
                        new
                        {
                            Id = 68,
                            categoryId = 7,
                            subCategoryId = 68
                        },
                        new
                        {
                            Id = 69,
                            categoryId = 7,
                            subCategoryId = 19
                        },
                        new
                        {
                            Id = 70,
                            categoryId = 8,
                            subCategoryId = 69
                        },
                        new
                        {
                            Id = 71,
                            categoryId = 8,
                            subCategoryId = 70
                        },
                        new
                        {
                            Id = 72,
                            categoryId = 8,
                            subCategoryId = 71
                        },
                        new
                        {
                            Id = 73,
                            categoryId = 8,
                            subCategoryId = 72
                        },
                        new
                        {
                            Id = 74,
                            categoryId = 8,
                            subCategoryId = 73
                        },
                        new
                        {
                            Id = 75,
                            categoryId = 8,
                            subCategoryId = 74
                        },
                        new
                        {
                            Id = 76,
                            categoryId = 8,
                            subCategoryId = 75
                        },
                        new
                        {
                            Id = 77,
                            categoryId = 8,
                            subCategoryId = 76
                        },
                        new
                        {
                            Id = 78,
                            categoryId = 9,
                            subCategoryId = 77
                        },
                        new
                        {
                            Id = 79,
                            categoryId = 9,
                            subCategoryId = 78
                        },
                        new
                        {
                            Id = 80,
                            categoryId = 9,
                            subCategoryId = 79
                        },
                        new
                        {
                            Id = 81,
                            categoryId = 9,
                            subCategoryId = 80
                        },
                        new
                        {
                            Id = 82,
                            categoryId = 9,
                            subCategoryId = 81
                        },
                        new
                        {
                            Id = 83,
                            categoryId = 9,
                            subCategoryId = 82
                        },
                        new
                        {
                            Id = 84,
                            categoryId = 10,
                            subCategoryId = 83
                        },
                        new
                        {
                            Id = 85,
                            categoryId = 10,
                            subCategoryId = 84
                        },
                        new
                        {
                            Id = 86,
                            categoryId = 10,
                            subCategoryId = 85
                        },
                        new
                        {
                            Id = 87,
                            categoryId = 10,
                            subCategoryId = 86
                        },
                        new
                        {
                            Id = 88,
                            categoryId = 10,
                            subCategoryId = 87
                        },
                        new
                        {
                            Id = 89,
                            categoryId = 11,
                            subCategoryId = 88
                        },
                        new
                        {
                            Id = 90,
                            categoryId = 11,
                            subCategoryId = 89
                        },
                        new
                        {
                            Id = 91,
                            categoryId = 11,
                            subCategoryId = 90
                        },
                        new
                        {
                            Id = 92,
                            categoryId = 11,
                            subCategoryId = 91
                        },
                        new
                        {
                            Id = 93,
                            categoryId = 12,
                            subCategoryId = 92
                        },
                        new
                        {
                            Id = 94,
                            categoryId = 12,
                            subCategoryId = 93
                        },
                        new
                        {
                            Id = 95,
                            categoryId = 13,
                            subCategoryId = 94
                        },
                        new
                        {
                            Id = 96,
                            categoryId = 13,
                            subCategoryId = 95
                        },
                        new
                        {
                            Id = 97,
                            categoryId = 13,
                            subCategoryId = 96
                        },
                        new
                        {
                            Id = 98,
                            categoryId = 13,
                            subCategoryId = 97
                        },
                        new
                        {
                            Id = 99,
                            categoryId = 13,
                            subCategoryId = 98
                        },
                        new
                        {
                            Id = 100,
                            categoryId = 13,
                            subCategoryId = 99
                        },
                        new
                        {
                            Id = 101,
                            categoryId = 13,
                            subCategoryId = 100
                        },
                        new
                        {
                            Id = 102,
                            categoryId = 14,
                            subCategoryId = 101
                        },
                        new
                        {
                            Id = 103,
                            categoryId = 14,
                            subCategoryId = 102
                        },
                        new
                        {
                            Id = 104,
                            categoryId = 14,
                            subCategoryId = 103
                        },
                        new
                        {
                            Id = 105,
                            categoryId = 14,
                            subCategoryId = 104
                        },
                        new
                        {
                            Id = 106,
                            categoryId = 15,
                            subCategoryId = 105
                        },
                        new
                        {
                            Id = 107,
                            categoryId = 15,
                            subCategoryId = 106
                        },
                        new
                        {
                            Id = 108,
                            categoryId = 15,
                            subCategoryId = 107
                        },
                        new
                        {
                            Id = 109,
                            categoryId = 15,
                            subCategoryId = 108
                        },
                        new
                        {
                            Id = 110,
                            categoryId = 15,
                            subCategoryId = 109
                        },
                        new
                        {
                            Id = 111,
                            categoryId = 16,
                            subCategoryId = 110
                        },
                        new
                        {
                            Id = 112,
                            categoryId = 16,
                            subCategoryId = 111
                        },
                        new
                        {
                            Id = 113,
                            categoryId = 16,
                            subCategoryId = 112
                        },
                        new
                        {
                            Id = 114,
                            categoryId = 16,
                            subCategoryId = 113
                        },
                        new
                        {
                            Id = 115,
                            categoryId = 16,
                            subCategoryId = 114
                        },
                        new
                        {
                            Id = 116,
                            categoryId = 16,
                            subCategoryId = 115
                        },
                        new
                        {
                            Id = 117,
                            categoryId = 17,
                            subCategoryId = 116
                        },
                        new
                        {
                            Id = 118,
                            categoryId = 17,
                            subCategoryId = 117
                        },
                        new
                        {
                            Id = 119,
                            categoryId = 17,
                            subCategoryId = 118
                        },
                        new
                        {
                            Id = 120,
                            categoryId = 17,
                            subCategoryId = 119
                        },
                        new
                        {
                            Id = 121,
                            categoryId = 17,
                            subCategoryId = 120
                        },
                        new
                        {
                            Id = 122,
                            categoryId = 18,
                            subCategoryId = 121
                        },
                        new
                        {
                            Id = 123,
                            categoryId = 18,
                            subCategoryId = 122
                        },
                        new
                        {
                            Id = 124,
                            categoryId = 18,
                            subCategoryId = 123
                        },
                        new
                        {
                            Id = 125,
                            categoryId = 18,
                            subCategoryId = 124
                        },
                        new
                        {
                            Id = 126,
                            categoryId = 18,
                            subCategoryId = 125
                        },
                        new
                        {
                            Id = 127,
                            categoryId = 19,
                            subCategoryId = 126
                        },
                        new
                        {
                            Id = 128,
                            categoryId = 19,
                            subCategoryId = 127
                        },
                        new
                        {
                            Id = 129,
                            categoryId = 19,
                            subCategoryId = 128
                        },
                        new
                        {
                            Id = 130,
                            categoryId = 21,
                            subCategoryId = 130
                        },
                        new
                        {
                            Id = 131,
                            categoryId = 21,
                            subCategoryId = 131
                        },
                        new
                        {
                            Id = 132,
                            categoryId = 21,
                            subCategoryId = 132
                        },
                        new
                        {
                            Id = 133,
                            categoryId = 21,
                            subCategoryId = 133
                        },
                        new
                        {
                            Id = 134,
                            categoryId = 21,
                            subCategoryId = 134
                        },
                        new
                        {
                            Id = 135,
                            categoryId = 22,
                            subCategoryId = 135
                        },
                        new
                        {
                            Id = 136,
                            categoryId = 22,
                            subCategoryId = 136
                        },
                        new
                        {
                            Id = 137,
                            categoryId = 22,
                            subCategoryId = 137
                        },
                        new
                        {
                            Id = 138,
                            categoryId = 22,
                            subCategoryId = 138
                        },
                        new
                        {
                            Id = 139,
                            categoryId = 22,
                            subCategoryId = 139
                        },
                        new
                        {
                            Id = 140,
                            categoryId = 23,
                            subCategoryId = 140
                        },
                        new
                        {
                            Id = 141,
                            categoryId = 23,
                            subCategoryId = 141
                        },
                        new
                        {
                            Id = 142,
                            categoryId = 23,
                            subCategoryId = 142
                        },
                        new
                        {
                            Id = 143,
                            categoryId = 23,
                            subCategoryId = 143
                        },
                        new
                        {
                            Id = 144,
                            categoryId = 23,
                            subCategoryId = 144
                        },
                        new
                        {
                            Id = 145,
                            categoryId = 24,
                            subCategoryId = 145
                        },
                        new
                        {
                            Id = 146,
                            categoryId = 24,
                            subCategoryId = 146
                        },
                        new
                        {
                            Id = 147,
                            categoryId = 24,
                            subCategoryId = 176
                        },
                        new
                        {
                            Id = 148,
                            categoryId = 24,
                            subCategoryId = 147
                        },
                        new
                        {
                            Id = 149,
                            categoryId = 24,
                            subCategoryId = 148
                        },
                        new
                        {
                            Id = 150,
                            categoryId = 24,
                            subCategoryId = 149
                        },
                        new
                        {
                            Id = 151,
                            categoryId = 24,
                            subCategoryId = 150
                        },
                        new
                        {
                            Id = 152,
                            categoryId = 25,
                            subCategoryId = 150
                        },
                        new
                        {
                            Id = 153,
                            categoryId = 25,
                            subCategoryId = 151
                        },
                        new
                        {
                            Id = 154,
                            categoryId = 25,
                            subCategoryId = 152
                        },
                        new
                        {
                            Id = 155,
                            categoryId = 27,
                            subCategoryId = 153
                        },
                        new
                        {
                            Id = 156,
                            categoryId = 27,
                            subCategoryId = 154
                        },
                        new
                        {
                            Id = 157,
                            categoryId = 27,
                            subCategoryId = 155
                        },
                        new
                        {
                            Id = 158,
                            categoryId = 27,
                            subCategoryId = 156
                        },
                        new
                        {
                            Id = 159,
                            categoryId = 26,
                            subCategoryId = 157
                        },
                        new
                        {
                            Id = 160,
                            categoryId = 26,
                            subCategoryId = 158
                        },
                        new
                        {
                            Id = 161,
                            categoryId = 26,
                            subCategoryId = 159
                        },
                        new
                        {
                            Id = 162,
                            categoryId = 28,
                            subCategoryId = 162
                        },
                        new
                        {
                            Id = 163,
                            categoryId = 28,
                            subCategoryId = 163
                        },
                        new
                        {
                            Id = 164,
                            categoryId = 28,
                            subCategoryId = 164
                        },
                        new
                        {
                            Id = 165,
                            categoryId = 28,
                            subCategoryId = 165
                        },
                        new
                        {
                            Id = 166,
                            categoryId = 28,
                            subCategoryId = 166
                        },
                        new
                        {
                            Id = 167,
                            categoryId = 28,
                            subCategoryId = 167
                        },
                        new
                        {
                            Id = 168,
                            categoryId = 18,
                            subCategoryId = 160
                        },
                        new
                        {
                            Id = 169,
                            categoryId = 7,
                            subCategoryId = 161
                        },
                        new
                        {
                            Id = 170,
                            categoryId = 16,
                            subCategoryId = 168
                        },
                        new
                        {
                            Id = 171,
                            categoryId = 16,
                            subCategoryId = 169
                        },
                        new
                        {
                            Id = 172,
                            categoryId = 16,
                            subCategoryId = 170
                        },
                        new
                        {
                            Id = 173,
                            categoryId = 16,
                            subCategoryId = 171
                        },
                        new
                        {
                            Id = 174,
                            categoryId = 16,
                            subCategoryId = 172
                        },
                        new
                        {
                            Id = 175,
                            categoryId = 16,
                            subCategoryId = 173
                        },
                        new
                        {
                            Id = 176,
                            categoryId = 1,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 177,
                            categoryId = 2,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 178,
                            categoryId = 3,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 179,
                            categoryId = 5,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 180,
                            categoryId = 6,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 181,
                            categoryId = 7,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 182,
                            categoryId = 9,
                            subCategoryId = 175
                        },
                        new
                        {
                            Id = 183,
                            categoryId = 10,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 184,
                            categoryId = 11,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 185,
                            categoryId = 12,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 186,
                            categoryId = 13,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 187,
                            categoryId = 14,
                            subCategoryId = 195
                        },
                        new
                        {
                            Id = 188,
                            categoryId = 15,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 189,
                            categoryId = 16,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 190,
                            categoryId = 17,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 191,
                            categoryId = 18,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 192,
                            categoryId = 19,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 193,
                            categoryId = 20,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 194,
                            categoryId = 21,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 195,
                            categoryId = 22,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 196,
                            categoryId = 23,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 197,
                            categoryId = 24,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 198,
                            categoryId = 25,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 199,
                            categoryId = 26,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 200,
                            categoryId = 27,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 201,
                            categoryId = 28,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 202,
                            categoryId = 29,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 203,
                            categoryId = 9,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 204,
                            categoryId = 8,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 205,
                            categoryId = 14,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 206,
                            categoryId = 29,
                            subCategoryId = 181
                        },
                        new
                        {
                            Id = 207,
                            categoryId = 29,
                            subCategoryId = 177
                        },
                        new
                        {
                            Id = 208,
                            categoryId = 29,
                            subCategoryId = 178
                        },
                        new
                        {
                            Id = 209,
                            categoryId = 29,
                            subCategoryId = 179
                        },
                        new
                        {
                            Id = 210,
                            categoryId = 29,
                            subCategoryId = 180
                        },
                        new
                        {
                            Id = 211,
                            categoryId = 29,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 212,
                            categoryId = 30,
                            subCategoryId = 182
                        },
                        new
                        {
                            Id = 213,
                            categoryId = 30,
                            subCategoryId = 183
                        },
                        new
                        {
                            Id = 214,
                            categoryId = 30,
                            subCategoryId = 184
                        },
                        new
                        {
                            Id = 215,
                            categoryId = 30,
                            subCategoryId = 185
                        },
                        new
                        {
                            Id = 216,
                            categoryId = 30,
                            subCategoryId = 186
                        },
                        new
                        {
                            Id = 217,
                            categoryId = 31,
                            subCategoryId = 187
                        },
                        new
                        {
                            Id = 218,
                            categoryId = 31,
                            subCategoryId = 188
                        },
                        new
                        {
                            Id = 219,
                            categoryId = 31,
                            subCategoryId = 189
                        },
                        new
                        {
                            Id = 220,
                            categoryId = 31,
                            subCategoryId = 190
                        },
                        new
                        {
                            Id = 221,
                            categoryId = 31,
                            subCategoryId = 191
                        },
                        new
                        {
                            Id = 222,
                            categoryId = 31,
                            subCategoryId = 192
                        },
                        new
                        {
                            Id = 223,
                            categoryId = 31,
                            subCategoryId = 193
                        },
                        new
                        {
                            Id = 224,
                            categoryId = 31,
                            subCategoryId = 194
                        },
                        new
                        {
                            Id = 225,
                            categoryId = 31,
                            subCategoryId = 195
                        },
                        new
                        {
                            Id = 226,
                            categoryId = 30,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 227,
                            categoryId = 31,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 228,
                            categoryId = 4,
                            subCategoryId = 174
                        },
                        new
                        {
                            Id = 229,
                            categoryId = 29,
                            subCategoryId = 174
                        });
                });

            modelBuilder.Entity("ModelService.windoModels.CollaborationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CollaborationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "מיזם משותף"
                        },
                        new
                        {
                            Id = 2,
                            Description = "מוצר משותף"
                        },
                        new
                        {
                            Id = 3,
                            Description = "שיווק הדדי"
                        },
                        new
                        {
                            Id = 4,
                            Description = "השקעה ושותפות"
                        });
                });

            modelBuilder.Entity("ModelService.windoModels.JointProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("ConfirmedByPartners")
                        .HasColumnType("bit");

                    b.Property<string>("HeaderCollaboration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IfDisplayedInCS")
                        .HasColumnType("bit");

                    b.Property<bool?>("IncreasingRevenue")
                        .HasColumnType("bit");

                    b.Property<string>("JointExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MoreLeisure")
                        .HasColumnType("bit");

                    b.Property<bool?>("MoreShopping")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ReducingEffort")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReducingExpenses")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollaborationTypeId");

                    b.ToTable("JointProjects");
                });

            modelBuilder.Entity("ModelService.windoModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BusinessIdFrom")
                        .HasColumnType("int");

                    b.Property<int?>("CollaborationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMessagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessIdFrom");

                    b.HasIndex("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ModelService.windoModels.MessagesTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessIdTo")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessIdTo");

                    b.HasIndex("MessageId");

                    b.ToTable("MessagesTo");
                });

            modelBuilder.Entity("ModelService.windoModels.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int?>("CategorySubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatetionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBold")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPayNote")
                        .HasColumnType("bit");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CategorySubCategoryId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ModelService.windoModels.NotesBoards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("NoteId");

                    b.ToTable("NotesBoards");
                });

            modelBuilder.Entity("ModelService.windoModels.PaidTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("CategorySubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerBusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Flexable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IfDisplayedInCS")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PictureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Price")
                        .HasColumnType("bit");

                    b.Property<bool?>("Professionalism")
                        .HasColumnType("bit");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScopTransactionNIS")
                        .HasColumnType("int");

                    b.Property<bool?>("Service")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierBusinessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaidTransactions");
                });

            modelBuilder.Entity("ModelService.windoModels.ReplayNoteMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("MessageId");

                    b.HasIndex("NoteId");

                    b.ToTable("ReplayNoteMessages");
                });

            modelBuilder.Entity("ModelService.windoModels.StaticSiteComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticSiteComponents");
                });

            modelBuilder.Entity("ModelService.windoModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "עסק רשום"
                        },
                        new
                        {
                            Id = 2,
                            name = "עסק מאושר"
                        });
                });

            modelBuilder.Entity("Windo.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "בניית אתרים"
                        },
                        new
                        {
                            Id = 2,
                            name = "עיצוב וגרפיקה"
                        },
                        new
                        {
                            Id = 3,
                            name = "טכנולוגיה ופיתוח תוכנה "
                        },
                        new
                        {
                            Id = 4,
                            name = "כתיבה ועריכה"
                        },
                        new
                        {
                            Id = 5,
                            name = "תרגום"
                        },
                        new
                        {
                            Id = 6,
                            name = "שיווק ומכירות"
                        },
                        new
                        {
                            Id = 7,
                            name = "וידאו וצילום סטילס"
                        },
                        new
                        {
                            Id = 8,
                            name = "אדמיניסטרציה"
                        },
                        new
                        {
                            Id = 9,
                            name = "הרצאות והנחיית סדנאות"
                        },
                        new
                        {
                            Id = 10,
                            name = "אדריכלות ועיצוב פנים"
                        },
                        new
                        {
                            Id = 11,
                            name = "הפקות ואירועים"
                        },
                        new
                        {
                            Id = 12,
                            name = "שירותי כח אדם"
                        },
                        new
                        {
                            Id = 13,
                            name = "טיפוח אישי ויופי"
                        },
                        new
                        {
                            Id = 14,
                            name = "קייטרינג"
                        },
                        new
                        {
                            Id = 15,
                            name = "טיפול וייעוץ"
                        },
                        new
                        {
                            Id = 16,
                            name = "חנויות ומכירות"
                        },
                        new
                        {
                            Id = 17,
                            name = "ביגוד ואופנה"
                        },
                        new
                        {
                            Id = 18,
                            name = "פיננסים"
                        },
                        new
                        {
                            Id = 19,
                            name = "משפט"
                        },
                        new
                        {
                            Id = 20,
                            name = "btb שירותים לעסק"
                        },
                        new
                        {
                            Id = 21,
                            name = "קריינות ואולפן הקלטות"
                        },
                        new
                        {
                            Id = 22,
                            name = "אמנות"
                        },
                        new
                        {
                            Id = 23,
                            name = "פאות"
                        },
                        new
                        {
                            Id = 24,
                            name = "רפואה משלימה"
                        },
                        new
                        {
                            Id = 25,
                            name = "טיפולים שונים"
                        },
                        new
                        {
                            Id = 26,
                            name = "הריון ולידה"
                        },
                        new
                        {
                            Id = 27,
                            name = "אבחונים"
                        },
                        new
                        {
                            Id = 28,
                            name = "מקצועות במה"
                        },
                        new
                        {
                            Id = 29,
                            name = "תיירות ונופש"
                        },
                        new
                        {
                            Id = 30,
                            name = "בריאות"
                        },
                        new
                        {
                            Id = 31,
                            name = "קורסים דיגיטליים"
                        },
                        new
                        {
                            Id = 32,
                            name = "אחר"
                        });
                });

            modelBuilder.Entity("Windo.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "בניית אתרים פשוטים"
                        },
                        new
                        {
                            Id = 2,
                            name = "בניית עמודי נחיתה"
                        },
                        new
                        {
                            Id = 3,
                            name = "בניית אתרים דינמיים"
                        },
                        new
                        {
                            Id = 4,
                            name = "וורדפרס- WordPress"
                        },
                        new
                        {
                            Id = 5,
                            name = "אתרים רספונסיביים, פיתוח רספונסיבי"
                        },
                        new
                        {
                            Id = 6,
                            name = "חיתוך PSD לעיצוב HTML ו-CSS"
                        },
                        new
                        {
                            Id = 7,
                            name = "בנייה/ התאמה לסלולר"
                        },
                        new
                        {
                            Id = 8,
                            name = "סחר מקוון- פייפאל, mangento, Sprite"
                        },
                        new
                        {
                            Id = 9,
                            name = "ניהול אתר"
                        },
                        new
                        {
                            Id = 10,
                            name = "עיצוב לוגו"
                        },
                        new
                        {
                            Id = 11,
                            name = "עיצוב גרפי"
                        },
                        new
                        {
                            Id = 12,
                            name = "עיצוב פליירים"
                        },
                        new
                        {
                            Id = 13,
                            name = "עיצוב אתרים"
                        },
                        new
                        {
                            Id = 14,
                            name = "באנרים ופרסומות"
                        },
                        new
                        {
                            Id = 15,
                            name = "עיצוב מצגות"
                        },
                        new
                        {
                            Id = 16,
                            name = "איור/ רישום"
                        },
                        new
                        {
                            Id = 17,
                            name = "ציור קומיקס"
                        },
                        new
                        {
                            Id = 18,
                            name = "עיצוב חומרים פרסומיים"
                        },
                        new
                        {
                            Id = 19,
                            name = "עריכת וידיאו"
                        },
                        new
                        {
                            Id = 20,
                            name = "תלת מימד- מידול"
                        },
                        new
                        {
                            Id = 21,
                            name = "אנימציה"
                        },
                        new
                        {
                            Id = 22,
                            name = "עיצוב אריזות, מארזים, חבילות"
                        },
                        new
                        {
                            Id = 23,
                            name = "עיצוב דפי נחיתה"
                        },
                        new
                        {
                            Id = 24,
                            name = "ניהול פרוייקטים"
                        },
                        new
                        {
                            Id = 25,
                            name = "פיתוח "
                        },
                        new
                        {
                            Id = 26,
                            name = "UI/UX"
                        },
                        new
                        {
                            Id = 27,
                            name = "ניתוח מערכות"
                        },
                        new
                        {
                            Id = 28,
                            name = "בינה מלאכותית"
                        },
                        new
                        {
                            Id = 29,
                            name = "טלפוניה ומרכזיות"
                        },
                        new
                        {
                            Id = 30,
                            name = "ניהול רשתות תקשורת"
                        },
                        new
                        {
                            Id = 31,
                            name = "קלדנות, תמלול"
                        },
                        new
                        {
                            Id = 32,
                            name = "כתיבת תוכן לאתרי אינטרנט"
                        },
                        new
                        {
                            Id = 33,
                            name = "כתיבה יצירתית"
                        },
                        new
                        {
                            Id = 34,
                            name = "כתיבת מאמרים"
                        },
                        new
                        {
                            Id = 35,
                            name = "עריכה לשונית, הגהה"
                        },
                        new
                        {
                            Id = 36,
                            name = "כתיבה שיווקית"
                        },
                        new
                        {
                            Id = 37,
                            name = "קופירייטינג"
                        },
                        new
                        {
                            Id = 38,
                            name = "כתיבת עבודות אקדמיות"
                        },
                        new
                        {
                            Id = 39,
                            name = "כתיבה ועריכת קו'ח"
                        },
                        new
                        {
                            Id = 40,
                            name = "כתיבת פוסטים"
                        },
                        new
                        {
                            Id = 41,
                            name = "כתיבת בקשות לתרומות, מענקים ומלגות"
                        },
                        new
                        {
                            Id = 42,
                            name = "תרגום לשפות"
                        },
                        new
                        {
                            Id = 43,
                            name = "תרגום לשפת הסימנים"
                        },
                        new
                        {
                            Id = 44,
                            name = "תרגום מעברית"
                        },
                        new
                        {
                            Id = 45,
                            name = "תרגום לעברית"
                        },
                        new
                        {
                            Id = 46,
                            name = "שיווק ברשת"
                        },
                        new
                        {
                            Id = 47,
                            name = "קידום אתרים"
                        },
                        new
                        {
                            Id = 48,
                            name = "מכירות"
                        },
                        new
                        {
                            Id = 49,
                            name = "אסטרטגיה שיווקית"
                        },
                        new
                        {
                            Id = 50,
                            name = "יעוץ וליווי עסקי"
                        },
                        new
                        {
                            Id = 51,
                            name = "גיוס משאבים"
                        },
                        new
                        {
                            Id = 52,
                            name = "ייעוץ ארגוני"
                        },
                        new
                        {
                            Id = 53,
                            name = "פיתוח עסקי"
                        },
                        new
                        {
                            Id = 54,
                            name = "שיווק במייל"
                        },
                        new
                        {
                            Id = 55,
                            name = "יח'צ"
                        },
                        new
                        {
                            Id = 56,
                            name = "מיתוג, תדמית עסקית"
                        },
                        new
                        {
                            Id = 57,
                            name = "חקר שוק"
                        },
                        new
                        {
                            Id = 58,
                            name = "טלמרקטינג"
                        },
                        new
                        {
                            Id = 59,
                            name = "צילום אווירי/ רחפן"
                        },
                        new
                        {
                            Id = 60,
                            name = "צילום אירועים"
                        },
                        new
                        {
                            Id = 61,
                            name = "צילום מסחרי"
                        },
                        new
                        {
                            Id = 62,
                            name = "צילום, הפקת וידאו"
                        },
                        new
                        {
                            Id = 63,
                            name = "סרטי תדמית"
                        },
                        new
                        {
                            Id = 64,
                            name = "צילום מוצרים"
                        },
                        new
                        {
                            Id = 65,
                            name = "צילום אוכל"
                        },
                        new
                        {
                            Id = 66,
                            name = "צילום משפחות"
                        },
                        new
                        {
                            Id = 67,
                            name = "צילום אדריכלות ועיצוב פנים"
                        },
                        new
                        {
                            Id = 68,
                            name = "צילום אופנה"
                        },
                        new
                        {
                            Id = 69,
                            name = "קלדנות"
                        },
                        new
                        {
                            Id = 70,
                            name = "עזרה אדמינסרטיבית"
                        },
                        new
                        {
                            Id = 71,
                            name = "רכש"
                        },
                        new
                        {
                            Id = 72,
                            name = "מזכירות"
                        },
                        new
                        {
                            Id = 73,
                            name = "שירותי גבייה"
                        },
                        new
                        {
                            Id = 74,
                            name = "שירות לקוחות"
                        },
                        new
                        {
                            Id = 75,
                            name = "ניהול משרד"
                        },
                        new
                        {
                            Id = 76,
                            name = "תיאום פגישות"
                        },
                        new
                        {
                            Id = 77,
                            name = "תעסוקה ועסקים"
                        },
                        new
                        {
                            Id = 78,
                            name = "חינוך"
                        },
                        new
                        {
                            Id = 79,
                            name = "טכנולוגיה ומחשבים"
                        },
                        new
                        {
                            Id = 80,
                            name = "בריאות"
                        },
                        new
                        {
                            Id = 81,
                            name = "אימון וטיפול"
                        },
                        new
                        {
                            Id = 82,
                            name = "אומנות המזון"
                        },
                        new
                        {
                            Id = 83,
                            name = "עיצוב ותכנון"
                        },
                        new
                        {
                            Id = 84,
                            name = "רישוי"
                        },
                        new
                        {
                            Id = 85,
                            name = "עיצוב פנים"
                        },
                        new
                        {
                            Id = 86,
                            name = "הום סטיילינג"
                        },
                        new
                        {
                            Id = 87,
                            name = "CAD, AutoCAD, שרטוט אדריכלי"
                        },
                        new
                        {
                            Id = 88,
                            name = "תכנון כנסים"
                        },
                        new
                        {
                            Id = 89,
                            name = "הפקת אירועים"
                        },
                        new
                        {
                            Id = 90,
                            name = "עיצוב אירועים"
                        },
                        new
                        {
                            Id = 91,
                            name = "שיווק וייצוג אומנים"
                        },
                        new
                        {
                            Id = 92,
                            name = "השמה"
                        },
                        new
                        {
                            Id = 93,
                            name = "ייעוץ/ אבחון תעסוקתי"
                        },
                        new
                        {
                            Id = 94,
                            name = "סטיילינג"
                        },
                        new
                        {
                            Id = 95,
                            name = "קוסמטיקה"
                        },
                        new
                        {
                            Id = 96,
                            name = "מכירת פיאות"
                        },
                        new
                        {
                            Id = 97,
                            name = "עיצוב פאה"
                        },
                        new
                        {
                            Id = 98,
                            name = "סירוק פאה"
                        },
                        new
                        {
                            Id = 99,
                            name = "תסרוקות לאירועים"
                        },
                        new
                        {
                            Id = 100,
                            name = "איפור לאירועים"
                        },
                        new
                        {
                            Id = 101,
                            name = "קייטרינג חלבי"
                        },
                        new
                        {
                            Id = 102,
                            name = "קייטרינג בשרי"
                        },
                        new
                        {
                            Id = 103,
                            name = "עיצוב בארים"
                        },
                        new
                        {
                            Id = 104,
                            name = "קונדיטוריה"
                        },
                        new
                        {
                            Id = 105,
                            name = "טיפול רגשי"
                        },
                        new
                        {
                            Id = 106,
                            name = "אימון"
                        },
                        new
                        {
                            Id = 107,
                            name = "ייעוץ רגשי"
                        },
                        new
                        {
                            Id = 108,
                            name = "הנחיית הורים"
                        },
                        new
                        {
                            Id = 109,
                            name = "ייעוץ / טיפול זוגי"
                        },
                        new
                        {
                            Id = 110,
                            name = "חד פעמי"
                        },
                        new
                        {
                            Id = 111,
                            name = "בגדים"
                        },
                        new
                        {
                            Id = 112,
                            name = "נעליים"
                        },
                        new
                        {
                            Id = 113,
                            name = "גרביים"
                        },
                        new
                        {
                            Id = 114,
                            name = "מוצרי אפייה"
                        },
                        new
                        {
                            Id = 115,
                            name = "עדשות מגע"
                        },
                        new
                        {
                            Id = 116,
                            name = "עיצוב אופנה"
                        },
                        new
                        {
                            Id = 117,
                            name = "השכרת בגדי אירועים"
                        },
                        new
                        {
                            Id = 118,
                            name = "תפירת בגדי אירועים"
                        },
                        new
                        {
                            Id = 119,
                            name = "שמלות כלה"
                        },
                        new
                        {
                            Id = 120,
                            name = "תחתיות לאירועים"
                        },
                        new
                        {
                            Id = 121,
                            name = "ייעוץ מס"
                        },
                        new
                        {
                            Id = 122,
                            name = "ראיית חשבון"
                        },
                        new
                        {
                            Id = 123,
                            name = "הגשת דוחות"
                        },
                        new
                        {
                            Id = 124,
                            name = "הנהלת חשבונות"
                        },
                        new
                        {
                            Id = 125,
                            name = "חשבות שכר"
                        },
                        new
                        {
                            Id = 126,
                            name = "עריכת דין- עריכת הסכמים"
                        },
                        new
                        {
                            Id = 127,
                            name = "עריכת דין- ייעוץ משפטי"
                        },
                        new
                        {
                            Id = 128,
                            name = "עריכת דין- ייצוג"
                        },
                        new
                        {
                            Id = 129,
                            name = "אמנות"
                        },
                        new
                        {
                            Id = 130,
                            name = "סאונד"
                        },
                        new
                        {
                            Id = 131,
                            name = "קריינות"
                        },
                        new
                        {
                            Id = 132,
                            name = "דיבוב"
                        },
                        new
                        {
                            Id = 133,
                            name = "פסי קול"
                        },
                        new
                        {
                            Id = 134,
                            name = "אולפן הקלטות"
                        },
                        new
                        {
                            Id = 135,
                            name = "מחול"
                        },
                        new
                        {
                            Id = 136,
                            name = "דרמה"
                        },
                        new
                        {
                            Id = 137,
                            name = "מוזיקה"
                        },
                        new
                        {
                            Id = 138,
                            name = "איור וציור"
                        },
                        new
                        {
                            Id = 139,
                            name = "אמנות שימושית"
                        },
                        new
                        {
                            Id = 140,
                            name = "סירוק פאות"
                        },
                        new
                        {
                            Id = 141,
                            name = "ייצור פאות"
                        },
                        new
                        {
                            Id = 142,
                            name = "תפירת פאות"
                        },
                        new
                        {
                            Id = 143,
                            name = "תיקונים"
                        },
                        new
                        {
                            Id = 144,
                            name = "צביעה"
                        },
                        new
                        {
                            Id = 145,
                            name = "הומאופטיה"
                        },
                        new
                        {
                            Id = 146,
                            name = "נטורופתיה"
                        },
                        new
                        {
                            Id = 147,
                            name = "אירידיולוגיה"
                        },
                        new
                        {
                            Id = 148,
                            name = "נרות הופי"
                        },
                        new
                        {
                            Id = 149,
                            name = "אוסטיאופתיה"
                        },
                        new
                        {
                            Id = 150,
                            name = "צמחי באך"
                        },
                        new
                        {
                            Id = 151,
                            name = "הידרותרפיה"
                        },
                        new
                        {
                            Id = 152,
                            name = "דיאטנית"
                        },
                        new
                        {
                            Id = 153,
                            name = "גרפולוגיה"
                        },
                        new
                        {
                            Id = 154,
                            name = "מורפולוגיה"
                        },
                        new
                        {
                            Id = 155,
                            name = "כירולוגיה"
                        },
                        new
                        {
                            Id = 156,
                            name = "אבחון דידקטי"
                        },
                        new
                        {
                            Id = 157,
                            name = "הכנה ללידה"
                        },
                        new
                        {
                            Id = 158,
                            name = "דולה"
                        },
                        new
                        {
                            Id = 159,
                            name = "מיילדת"
                        },
                        new
                        {
                            Id = 160,
                            name = "משכנתאות ומימון"
                        },
                        new
                        {
                            Id = 161,
                            name = "אנימציה"
                        },
                        new
                        {
                            Id = 162,
                            name = "זמרת"
                        },
                        new
                        {
                            Id = 163,
                            name = "שחקנית"
                        },
                        new
                        {
                            Id = 164,
                            name = "נגנית"
                        },
                        new
                        {
                            Id = 165,
                            name = "רקדנית"
                        },
                        new
                        {
                            Id = 166,
                            name = "מפעילת תוכניות"
                        },
                        new
                        {
                            Id = 167,
                            name = "קוסמת"
                        },
                        new
                        {
                            Id = 168,
                            name = "מתנות"
                        },
                        new
                        {
                            Id = 169,
                            name = "משחקים"
                        },
                        new
                        {
                            Id = 170,
                            name = "תכשיטים"
                        },
                        new
                        {
                            Id = 171,
                            name = "אקססוריז"
                        },
                        new
                        {
                            Id = 172,
                            name = "מוצרי חשמל"
                        },
                        new
                        {
                            Id = 173,
                            name = "תוספי תזונה"
                        },
                        new
                        {
                            Id = 174,
                            name = "אחר"
                        },
                        new
                        {
                            Id = 175,
                            name = "התעמלות"
                        },
                        new
                        {
                            Id = 176,
                            name = "דיקור סיני"
                        },
                        new
                        {
                            Id = 177,
                            name = "אירוח"
                        },
                        new
                        {
                            Id = 178,
                            name = "אטרקציות"
                        },
                        new
                        {
                            Id = 179,
                            name = "הסעדה ומזון"
                        },
                        new
                        {
                            Id = 180,
                            name = "טיולים"
                        },
                        new
                        {
                            Id = 181,
                            name = "הסעות"
                        },
                        new
                        {
                            Id = 182,
                            name = "הרצאות וסדנאות על בריאות"
                        },
                        new
                        {
                            Id = 183,
                            name = "מכירת תוספי תזונה"
                        },
                        new
                        {
                            Id = 184,
                            name = "ייעוץ אישי"
                        },
                        new
                        {
                            Id = 185,
                            name = "התעמלות"
                        },
                        new
                        {
                            Id = 186,
                            name = "לפני ואחרי לידה"
                        },
                        new
                        {
                            Id = 187,
                            name = "עיצוב"
                        },
                        new
                        {
                            Id = 188,
                            name = "עסקי"
                        },
                        new
                        {
                            Id = 189,
                            name = "פיננסי"
                        },
                        new
                        {
                            Id = 190,
                            name = "דיגיטל"
                        },
                        new
                        {
                            Id = 191,
                            name = "שיווק ומכירות"
                        },
                        new
                        {
                            Id = 192,
                            name = "קולינריה"
                        },
                        new
                        {
                            Id = 193,
                            name = "בריאות"
                        },
                        new
                        {
                            Id = 194,
                            name = "זוגיות והורות"
                        },
                        new
                        {
                            Id = 195,
                            name = "לימוד מקצוע"
                        },
                        new
                        {
                            Id = 196,
                            name = "עיצובי פירות וירקות"
                        },
                        new
                        {
                            Id = 197,
                            name = "חבילות נופש"
                        });
                });

            modelBuilder.Entity("ModelService.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Handle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ModelService.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ModelService.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ModelService.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.AddressModel", b =>
                {
                    b.HasOne("ModelService.ApplicationUser", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ModelService.RolePermission", b =>
                {
                    b.HasOne("ModelService.ApplicationRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("ModelService.TokenModel", b =>
                {
                    b.HasOne("ModelService.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.Buisness", b =>
                {
                    b.HasOne("ModelService.windoModels.Status", "Status")
                        .WithMany("Buisness")
                        .HasForeignKey("UpdatedBusinessStatus");

                    b.HasOne("ModelService.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .HasPrincipalKey("Email");
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessArea", b =>
                {
                    b.HasOne("ModelService.windoModels.Area", "Area")
                        .WithMany("BuisnessArea")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BuisnessArea")
                        .HasForeignKey("buisnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessPicture", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BuisnessPicture")
                        .HasForeignKey("buisnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessStatus", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BuisnessStatus")
                        .HasForeignKey("buisnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Status", "Status")
                        .WithMany("BuisnessStatus")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessSubCategory", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BuisnessSubCategory")
                        .HasForeignKey("buisnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.CategorySubCategory", "CategorySubCategory")
                        .WithMany("BuisnessSubCategory")
                        .HasForeignKey("categorySubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BuisnessSubCategoryBarter", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BuisnessSubCategoryBarter")
                        .HasForeignKey("buisnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.CategorySubCategory", "CategorySubCategory")
                        .WithMany("BuisnessSubCategoryBarter")
                        .HasForeignKey("categorySubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BusinessInCaseStudy", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Buisness")
                        .WithMany("BusinessInCaseStudies")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.CaseStudy", "CaseStudy")
                        .WithMany("BusinessesInCaseStudy")
                        .HasForeignKey("CaseStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.BusinessInCollaboration", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Business")
                        .WithMany("BusinessInCollaborations")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.JointProject", "JointProject")
                        .WithMany("BuisnessesInCollaborations")
                        .HasForeignKey("JoinProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudy", b =>
                {
                    b.HasOne("ModelService.windoModels.BarterDeal", "BarterDeal")
                        .WithMany()
                        .HasForeignKey("BarterDealID");

                    b.HasOne("ModelService.windoModels.JointProject", "JointProject")
                        .WithMany()
                        .HasForeignKey("JointProjectID");

                    b.HasOne("ModelService.windoModels.PaidTransaction", "PaidTransaction")
                        .WithMany()
                        .HasForeignKey("PaidTransactionID");
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudyCustomerResponses", b =>
                {
                    b.HasOne("ModelService.windoModels.CaseStudy", "CaseStudy")
                        .WithMany("CustomerResponseses")
                        .HasForeignKey("CaseStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.CaseStudyPicture", b =>
                {
                    b.HasOne("ModelService.windoModels.CaseStudy", "CaseStudy")
                        .WithMany("Pictures")
                        .HasForeignKey("CaseStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.CategorySubCategory", b =>
                {
                    b.HasOne("Windo.Models.Category", "Category")
                        .WithMany("CategorySubCategory")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Windo.Models.SubCategory", "SubCategory")
                        .WithMany("CategorySubCategory")
                        .HasForeignKey("subCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.JointProject", b =>
                {
                    b.HasOne("ModelService.windoModels.CollaborationType", "CollaborationType")
                        .WithMany("JointProjects")
                        .HasForeignKey("CollaborationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.Message", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "BusinessFrom")
                        .WithMany()
                        .HasForeignKey("BusinessIdFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Message", null)
                        .WithMany("ChildrenMessages")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ModelService.windoModels.MessagesTo", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "BuisnessTo")
                        .WithMany()
                        .HasForeignKey("BusinessIdTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Message", "Message")
                        .WithMany("ListMessagesTo")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.Note", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.CategorySubCategory", "CategorySubCategory")
                        .WithMany()
                        .HasForeignKey("CategorySubCategoryId");
                });

            modelBuilder.Entity("ModelService.windoModels.NotesBoards", b =>
                {
                    b.HasOne("ModelService.windoModels.Board", "Board")
                        .WithMany("NotesBoards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Note", "Note")
                        .WithMany("NotesBoards")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelService.windoModels.ReplayNoteMessage", b =>
                {
                    b.HasOne("ModelService.windoModels.Buisness", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelService.windoModels.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
